import os
import re
import sqlite3
import requests
from flask import Flask, request
from telegram import Bot, Update, MessageEntity
from telegram.error import TelegramError

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.environ["BOT_TOKEN"]
WEBHOOK_PATH = "/webhook"          # —Ç–æ—Ç –∂–µ –ø—É—Ç—å, —á—Ç–æ —É–∫–∞–∂–µ—Ç–µ –≤ setWebhook
PORT = int(os.environ.get("PORT", 8443))

app = Flask(__name__)
bot = Bot(token=TOKEN)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("debts.db", check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    creditor_id INTEGER NOT NULL,
    debtor_id   INTEGER NOT NULL,
    amount      REAL    NOT NULL,
    comment     TEXT,
    ts          DATETIME DEFAULT CURRENT_TIMESTAMP
);
""")
conn.commit()

# === –£—Ç–∏–ª–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def send(chat_id: int, text: str):
    requests.post(
        f"https://api.telegram.org/bot{TOKEN}/sendMessage",
        json={"chat_id": chat_id, "text": text}
    )

# === –ü–æ–º–æ—â–Ω–∏–∫: –∏–∑–≤–ª–µ—á—å —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def extract_target_user(update: Update):
    msg = update.message

    # 1) –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if msg.reply_to_message:
        return msg.reply_to_message.from_user

    # 2) –ü–æ entity mention/text_mention
    if msg.entities:
        for ent in msg.entities:
            if ent.type == MessageEntity.TEXT_MENTION:
                return ent.user
            if ent.type == MessageEntity.MENTION:
                username = msg.text[ent.offset:ent.offset+ent.length]
                try:
                    chat = bot.get_chat(username)  # '@username'
                    # –°–æ–±–µ—Ä—ë–º User‚Äë–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç
                    class U: pass
                    u = U()
                    u.id = chat.id
                    u.full_name = " ".join(filter(None, [chat.first_name, chat.last_name]))
                    return u
                except TelegramError:
                    return None
    return None

# === Webhook endpoint ===
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, bot)

    if not (update.message and update.message.text):
        return "OK"

    text    = update.message.text.strip()
    chat_id = update.effective_chat.id
    me      = update.effective_user

    # --- /addDebt ---
    if text.startswith("/addDebt"):
        target = extract_target_user(update)
        if not target:
            send(chat_id, "‚ùóÔ∏è–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return "OK"

        # –≤—ã—Ç–∞—â–∏–º —Å—É–º–º—É –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        # —Ñ–æ—Ä–º–∞—Ç: /addDebt @user 123.45 - –∑–∞ –æ–±–µ–¥
        m = re.match(r"^/addDebt\s+\S+\s+([\d.]+)(?:\s*-\s*(.+))?$", text)
        if not m:
            send(chat_id, "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/addDebt @user 100 - –æ–±–µ–¥")
            return "OK"

        amt = float(m.group(1))
        comment = m.group(2) or ""
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ = –¥–æ–ª–≥)
        cur.execute(
            "INSERT INTO transactions(creditor_id, debtor_id, amount, comment) VALUES(?,?,?,?)",
            (me.id, target.id, amt, comment)
        )
        conn.commit()
        send(chat_id, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {target.full_name} –¥–æ–ª–∂–µ–Ω(–∞) –≤–∞–º {amt}‚Ç∏ {('('+comment+')' if comment else '')}")
        return "OK"

    # --- /minusDebt ---
    if text.startswith("/minusDebt"):
        target = extract_target_user(update)
        if not target:
            send(chat_id, "‚ùóÔ∏è–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return "OK"

        # —Ñ–æ—Ä–º–∞—Ç: /minusDebt @user 50
        m = re.match(r"^/minusDebt\s+\S+\s+([\d.]+)$", text)
        if not m:
            send(chat_id, "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/minusDebt @user 50")
            return "OK"

        amt = float(m.group(1))
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–ø–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞)
        cur.execute(
            "INSERT INTO transactions(creditor_id, debtor_id, amount, comment) VALUES(?,?,?,?)",
            (me.id, target.id, -amt, "–≤–æ–∑–≤—Ä–∞—Ç")
        )
        conn.commit()
        send(chat_id, f"‚úÖ {target.full_name} –≤–µ—Ä–Ω—É–ª(–∞) –≤–∞–º {amt}‚Ç∏")
        return "OK"

    # --- /stats ---
    if text.strip() == "/stats":
        # —Å—É–º–º–∏—Ä—É–µ–º –ø–æ –¥–æ–ª–∂–Ω–∏–∫–∞–º, —É –∫–æ—Ç–æ—Ä—ã—Ö net > 0
        cur.execute("""
            SELECT debtor_id, SUM(amount) as total
              FROM transactions
             WHERE creditor_id = ?
             GROUP BY debtor_id
             HAVING total > 0
        """, (me.id,))
        rows = cur.fetchall()
        if not rows:
            send(chat_id, "üìä –ù–∏–∫—Ç–æ –≤–∞–º –Ω–µ –¥–æ–ª–∂–µ–Ω.")
        else:
            lines = []
            for debtor_id, total in rows:
                try:
                    chat = bot.get_chat(debtor_id)
                    name = " ".join(filter(None,[chat.first_name, chat.last_name]))
                except:
                    name = str(debtor_id)
                lines.append(f"{name}: {total}‚Ç∏")
            msg = "üìä –í–∞–º –¥–æ–ª–∂–Ω—ã:\n" + "\n".join(lines)
            send(chat_id, msg)
        return "OK"

    return "OK"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)
